import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import { idText } from "typescript";
import { API_URL } from "../../constants/constants";
import { useFaqList } from "../../services/faq/use-faq-list";
import { useFaqReact } from "../../services/faq/use-faq-react";

interface FaqDetailProps {
  id: number;
  likes: number;
  dislikes: number;
  answer: string;
  question: string;
}

interface FaqQuestionProps {
  question: string;
  id: number;
}

export default function FAQPage() {
  const [selectedFaqIndex, setSelectedFaqIndex] = React.useState(0);
  const { data, isLoading } = useFaqList();
  const faqQuestion: FaqQuestionProps[] = data?.data;
  const [faqDetail, setFaqDetail] = React.useState<FaqDetailProps>();
  const { mutate: addReaction } = useFaqReact();

  useEffect(() => {
    const getFirstData = async () => {
      if (faqQuestion) {
        await fetch(`${API_URL}/faq/${faqQuestion[0]?.id}`)
          .then((res) => res.json())
          .then((val) => {
            setFaqDetail(val?.data);
          });
      }
    };
    getFirstData();
  }, [faqQuestion]);

  const onClickFaqIndex = async (index: number, id: number) => {
    setSelectedFaqIndex(index);
    await fetch(`${API_URL}/faq/${id}`)
      .then((res) => res.json())
      .then((val) => {
        setFaqDetail(val?.data);
      });
  };

  const onClickReaction = (id?: number, type?: string) => {
    if (id) {
      if (type === "like") {
        addReaction({
          faqId: id,
          like: true,
        });
      } else {
        addReaction({
          faqId: id,
          like: false,
        });
      }
    }
  };

  useEffect(() => {
    console.log(faqDetail, "faqDetaile");
  }, [faqDetail, selectedFaqIndex]);

  const [searchTerm, setSearchTerm] = useState("");
  const [submittedKeyword, setSubmittedKeyword] = useState("");

  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      console.log(searchTerm);
      setSubmittedKeyword(searchTerm);
      // Send Axios request here
    }, 500);

    return () => clearTimeout(delayDebounceFn);
  }, [searchTerm]);

  if (isLoading) {
    return false;
  }

  return (
    <div>
      <Head>
        <title>FAQ - Gooddreamer Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="">
        <div className=" py-8 px-20 mt-4">
          <div className="flex justify-between">
            <h1 className="text-[40px] text-purple-primary font-bold">FAQ</h1>
          </div>
        </div>
        <div className="flex py-2 px-20 mt-4">
          <div className="w-1/2">
            <div className="relative">
              <input
                type="text"
                onChange={(e) => setSearchTerm(e.target.value)}
                className="h-[60px] pl-12 w-full rounded-[8px] text-[14px] placeholder:text-[14px] text-grey-sixth px-[12px] py-[5px] bg-grey-fifth focus:outline-none"
                placeholder="Cari topik pertanyaan terkait"
              />
              <Image
                src="/assets/icons/magnifying-glass.svg"
                width={23}
                height={23}
                alt="magnifying"
                className="absolute left-4 transform -translate-y-1/2 top-1/2"
              />
            </div>
          </div>
        </div>
        <div className="flex pt-2 pb-8 gap-8 px-20 mt-4">
          <div className="bg-purple-primary p-4 text-white rounded-[5px] text-[20px] w-1/2 h-screen">
            <ul className="flex flex-col gap-4 list-disc list-inside">
              {faqQuestion
                ?.filter((question) =>
                  question?.question
                    ?.toLowerCase()
                    .includes(submittedKeyword?.toLowerCase())
                )
                .map((val: FaqQuestionProps, index: number) => (
                  <li
                    onClick={() => onClickFaqIndex(index, val?.id)}
                    className={`transition-all  cursor-pointer p-4 rounded-[5px] ${
                      selectedFaqIndex === index ? "bg-purple-third" : ""
                    }`}
                    key={index}
                  >
                    {val?.question}
                  </li>
                ))}
            </ul>
          </div>
          <div className="w-1/2 p-4 transition-all">
            <h1 className="text-[30px] font-bold leading-[40px]">
              {faqDetail?.question}
            </h1>
            {/* <p className="mt-4">{faqDetail?.createdAt}</p> */}
            <p className="mt-4">{faqDetail?.answer}</p>
            <div className="flex items-center gap-4 mt-12">
              <button
                onClick={() => onClickReaction(faqDetail?.id, "like")}
                className="w-[200px] justify-center rounded-[8px] bg-[#F7F7F7] px-[12px] py-[10px] text-[14px] text-[#BDBDBD] flex items-center gap-2 focus:outline-none"
              >
                <Image
                  src="/assets/icons/thumb.svg"
                  width={20}
                  height={20}
                  alt="thumb"
                />
                <span>Membantu</span>
              </button>
              <button
                onClick={() => onClickReaction(faqDetail?.id, "dislike")}
                className="w-[200px] justify-center rounded-[8px] bg-[#F7F7F7] px-[12px] py-[10px] text-[14px] text-[#BDBDBD] flex items-center gap-2 focus:outline-none"
              >
                <Image
                  src="/assets/icons/down-thumb.svg"
                  width={20}
                  height={20}
                  alt="down-thumb"
                />
                <span>Tidak Membantu</span>
              </button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
